{
    "AgentAssist": "エージェントのアシスト動作",
    "Array": "リスト内のアイテムの追加、削除、および置き換えを行います。",
    "Array._pickRandom": "配列からランダムな値を返す",
    "Array._popStatement": "配列から最後の要素を削除し、その値を返します。",
    "Array._removeAtStatement": "特定の位置にある要素を削除します。",
    "Array._shiftStatement": "配列から最初の要素を削除し、その値を返します。このメソッドは、配列の長さを変更します。",
    "Array._unshiftStatement": "配列の先頭に要素を 1 つ追加して、配列の新しい長さを返します。",
    "Array.concat": "配列を別の配列と連結する。",
    "Array.concat|param|arr": "連結される他の配列",
    "Array.every": "配列内のすべての要素が、指定された関数によって実装されたテストに合格するかどうかをテストします。",
    "Array.every|param|callbackfn": "最大 2 つの引数を受け取る関数。every メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼び出します。",
    "Array.fill": "配列の指定の範囲のすべての要素を一定の値にする。終了インデックスは範囲に含まない。",
    "Array.filter": "コールバック関数で指定された条件を満たす配列の要素を返します。",
    "Array.filter|param|callbackfn": "最大 2 つの引数を受け取る関数。filter メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼び出します。",
    "Array.find": "指定されたテスト関数を満たす配列内の最初の要素の値を返します。一つも見つからない場合は、未定義が返されます。",
    "Array.forEach": "配列の各要素に対して定義されたコールバック関数を呼び出す。",
    "Array.forEach|param|callbackfn": "最大 2 つの引数を受け取る関数。forEach メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼び出します。",
    "Array.get": "指定された位置の値を取得します。",
    "Array.get|param|index": "0 から始まるアイテムのリスト中の位置。たとえば：0",
    "Array.indexOf": "配列内で値が最初に出現する位置を返します。",
    "Array.indexOf|param|fromIndex": "検索を開始する配列の場所。fromIndex を省略した場合、検索は位置 0 から始まります。",
    "Array.indexOf|param|item": "配列内で検索する値。",
    "Array.insertAt": "指定された位置に値を挿入し、長さを 1 つ増やします",
    "Array.insertAt|param|index": "値を挿入するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
    "Array.isArray": "指定されたオブジェクトが配列か確認する。",
    "Array.join": "配列のすべての要素を文字列でつなげた文字列を返す。",
    "Array.join|param|sep": "文字列の区切り記号",
    "Array.length": "配列の長さを取得または設定します。この数値は配列の最後の要素の位置よりも 1 つ大きな値になります。",
    "Array.map": "配列の各要素に対して定義されたコールバック関数を呼び出し、結果を含む配列を返します。",
    "Array.map|param|callbackfn": "最大 2 つの引数を受け取る関数。map メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼び出します。",
    "Array.pop": "配列から最後の要素を削除し、その値を返します。",
    "Array.push": "配列に新しい要素を追加します。",
    "Array.reduce": "配列のすべての要素に対して指定されたコールバック関数を呼び出します。コールバック関数の戻り値は累積した結果となり、次回コールバック関数が呼び出された際の引数として提供されます。",
    "Array.reduce|param|callbackfn": "最大 3 つの引数を受け取る関数。reduce メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼び出します。",
    "Array.reduce|param|initialValue": "累積を開始する初期値。callbackfn 関数の初回呼び出し時にはこの値を配列の値ではなく、引数として提供します。",
    "Array.removeAt": "特定の位置にある要素を削除し、その要素を返します",
    "Array.removeElement": "オブジェクト内で最初に出現したものを削除します。削除された場合は true を返します。",
    "Array.reverse": "配列に含まれる要素を逆の順番にします。最初の配列要素は最後の要素となり、最後の配列要素は最初の要素となります。",
    "Array.set": "指定された位置に値を格納します",
    "Array.set|param|index": "値を格納するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
    "Array.set|param|value": "挿入する値。たとえば：0",
    "Array.shift": "配列から最初の要素を削除し、その値を返します。このメソッドは、配列の長さを変更します。",
    "Array.slice": "配列の一部を返します。",
    "Array.slice|param|end": "配列の指定部分の終了位置。たとえば：0",
    "Array.slice|param|start": "配列の指定部分の開始位置。たとえば：0",
    "Array.some": "指定された関数で実装されているテストに、配列の中の少なくとも 1 つの要素が合格するかどうかを確認する。",
    "Array.some|param|callbackfn": "最大 2 つの引数を受け取る関数。some メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼び出します。",
    "Array.sort": "配列の要素を並び替えた後、配列を返します。並び順は必ずしも安定しているとは限りません。",
    "Array.splice": "配列から要素を削除します。",
    "Array.splice|param|deleteCount": "削除する要素の数。たとえば：0",
    "Array.splice|param|start": "要素の削除を開始する配列内の 0 から始まる位置。たとえば：0",
    "Array.unshift": "配列の先頭に要素を 1 つ追加して、配列の新しい長さを返します。",
    "Array@type": "リスト内のアイテムの追加、削除、および置き換えを行います。",
    "Block": "Minecraft のブロックの種類: 草、石、空気、その他...",
    "Boolean.toString": "オブジェクトの文字列表現を返します。",
    "Buffer": "pythonに必要な空の実装バッファー",
    "ChatArgument": "チャットコマンド用の有効な引数",
    "ColoredBlock": "色を変更できるブロック",
    "ComparatorMode": "コンパレーターのモード",
    "DayTime": "時間",
    "FillOperation": "既存のブロックに対する塗りつぶしオプション。既存のブロックの維持、入れ替え、破壊を制御します。",
    "FillOperation.Destroy": "指定した領域内のすべてのブロック（空気を含む）を指定されたブロックに置き換え、（未変更のものを含む）既存のブロックとブロックの中身をあたかもエンチャントされていないダイヤのシャベルやツルハシを使って採掘されたエンティティであるかのようにドロップします。（つたのようにはさみを使ってのみ採掘されるブロックはドロップしません。液体も同じです。）",
    "FillOperation.Hollow": "指定した領域の外枠にあるブロックのみを指定ブロックで置き換えます。\n中のブロックは空気に変更され、それ自身ではなく中身をエンティティとしてドロップします。\n指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
    "FillOperation.Keep": "指定した領域の空気ブロックのみを指定ブロックで置き換えます。",
    "FillOperation.Outline": "指定した領域の外枠にあるブロックのみを指定ブロックで置き換えます。\n中のブロックには影響はありません。指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
    "FillOperation.Replace": "指定した領域内のすべてのブロック（空気を含む）を指定されたブロックに置き換えますが、ブロックやブロックの中身をエンティティとしてドロップしません。",
    "GameDifficulty": "ゲームプレイ設定用のゲームの難易度",
    "GameRule": "ゲームプレイ設定用のゲームのルール",
    "Infinity": "正の無限大を表す定数。",
    "LeverPosition": "オンまたはオフの場合のレバーの向き",
    "Math": "より複雑な数値演算を行います。",
    "Math.abs": "数値の絶対値を返します（絶対値とはゼロとの距離です）。たとえば、-5の絶対値は、5の絶対値と同じく「5」です。",
    "Math.abs|param|x": "絶対値が必要な数値式を指定します。",
    "Math.acos": "数値のアークコサイン（ラジアン表記）を返します。",
    "Math.acos|param|x": "数値",
    "Math.asin": "数値のアークサイン（ラジアン表記）を返します。",
    "Math.asin|param|x": "数値",
    "Math.atan": "数値のアークタンジェント（ラジアン表記）を返します。",
    "Math.atan2": "左の値を右の値で割った結果のアークタンジェントを返します。",
    "Math.atan2|param|x": "数値",
    "Math.atan2|param|y": "数値",
    "Math.atan|param|x": "数値",
    "Math.ceil": "引数で指定された数値以上の最小値を返します。",
    "Math.ceil|param|x": "数値表現を指定します。",
    "Math.constrain": "数値を範囲内に制限します",
    "Math.constrain|param|high": "データ範囲の上限値（すべてのデータ型）",
    "Math.constrain|param|low": "データ範囲の下限値（すべてのデータ型）",
    "Math.constrain|param|value": "制限する値（すべてのデータ型）",
    "Math.cos": "数値のコサインを返します。",
    "Math.cos|param|x": "ラジアン表記の角度",
    "Math.exp": "``e^x`` を返します。",
    "Math.exp|param|x": "数値",
    "Math.floor": "引数で指定された数値以下の最大値を返します。",
    "Math.floor|param|x": "数値表現を指定します。",
    "Math.idiv": "2 つの数値の商を符号付 32 ビット整数値で返します。",
    "Math.idiv|param|x": "最初の数値",
    "Math.idiv|param|y": "二番目の数値",
    "Math.imul": "2 つの数値の積を符号付 32 ビット整数値で返します。",
    "Math.imul|param|x": "最初の数値",
    "Math.imul|param|y": "二番目の数値",
    "Math.isNaN": "JavaScript の isNaN() 関数を公開します。",
    "Math.log": "数値の自然対数（底 e）を返します。",
    "Math.log|param|x": "数値",
    "Math.map": "数値を、ある範囲から別の範囲にマップします。つまり、数値が``元の下限``なら``結果の下限``に変換され、``元の上限``なら``結果の上限``に変換され、間の値なら間の値に変換されます。",
    "Math.map|param|fromHigh": "元の値の上限。たとえば：1023",
    "Math.map|param|fromLow": "元の値の下限。",
    "Math.map|param|toHigh": "結果の値の上限。たとえば：4",
    "Math.map|param|toLow": "結果の値の下限。",
    "Math.map|param|value": "変換する、元の値。",
    "Math.max": "指定された2つの数値式のうち、大きい方を返します。",
    "Math.min": "指定された2つの数値式のうち、小さい方を返します。",
    "Math.pow": "底を指定の指数で累乗した値を返します。",
    "Math.pow|param|x": "式の底の値を指定します。",
    "Math.pow|param|y": "式の指数値を指定します。",
    "Math.random": "0と1の間の擬似乱数を返します。",
    "Math.randomRange": "min と max の間に含まれる疑似乱数を返します。両方の数値が整数値の場合は、結果も整数値となります。",
    "Math.randomRange|param|max": "境界を含めた上限。たとえば：10",
    "Math.randomRange|param|min": "境界を含めた下限。たとえば：0",
    "Math.round": "指定の数値表現を最も近い数値に丸めて返します。",
    "Math.roundWithPrecision": "``x``を、指定された``桁数``の数字に丸めます",
    "Math.roundWithPrecision|param|digits": "結果の桁数",
    "Math.roundWithPrecision|param|x": "丸める数",
    "Math.round|param|x": "最も近い数値に丸められる値。",
    "Math.sign": "x が正、負、または 0 のどれであるかを示す符号を返します。",
    "Math.sign|param|x": "テストする数値式",
    "Math.sin": "数値のサインを返します。",
    "Math.sin|param|x": "ラジアン表記の角度",
    "Math.sqrt": "数値の平方根を返します。",
    "Math.sqrt|param|x": "数値表現を指定します。",
    "Math.tan": "数値のタンジェントを返します。",
    "Math.tan|param|x": "ラジアン表記の角度",
    "Math.trunc": "小数部を切り捨てた数値を返します。",
    "Math.trunc|param|x": "数値表現。",
    "NaN": "非数(Not-A-Number)を表す定数。",
    "Number.isNaN": "指定された値が数値型のNaNかどうか確認する。",
    "Number.toString": "数値の文字列表現を返します。",
    "Object.keys": "オブジェクト内のフィールド名を返します。",
    "Position": "プレイヤーの位置 (~) に対して相対的な世界の座標。",
    "Position.add": "オフセットを追加して新しい位置を返します。",
    "Position.getValue": "指定した座標の値を取得します（x、y または z）。",
    "Position.getValue|param|direction": "座標の値を返す軸",
    "Position.isRelative": "座標がユーザーに対して相対的であるかどうかを示す値を取得します。",
    "Position.move": "指定のブロックによって移動された位置を返します。",
    "Position.toString": "この位置の文字列表現を返します。",
    "Position.toWorld": "この位置を世界での位置に変換して、世界での位置を新たに作成します。",
    "ShapeOperation": "図形を埋める演算子",
    "ShapeOperation.Hollow": "指定した領域の外枠にあるブロックのみを指定ブロックで置き換えます。\n中のブロックは空気に変更され、それ自身ではなく中身をエンティティとしてドロップします。\n指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
    "ShapeOperation.Outline": "指定した領域の外枠にあるブロックのみを指定ブロックで置き換えます。\n中のブロックには影響はありません。指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
    "ShapeOperation.Replace": "指定した領域内のすべてのブロック（空気を含む）を指定されたブロックに置き換えますが、ブロックやブロックの中身をエンティティとしてドロップしません。",
    "String": "テキスト文字列の結合、分割、検索を行います。",
    "String.charAt": "指定した位置にある文字を返します。",
    "String.charAt|param|index": "目的の文字の位置を 0 から始まる値で指定します。",
    "String.charCodeAt": "指定された位置にある文字の Unicode 値を返します。",
    "String.charCodeAt|param|index": "目的の文字の位置を 0 から始まる値で指定します。指定した位置に文字がない場合は、NaN が返されます。",
    "String.compare": "2 つの文字列の文字の順序にどのような違いがあるかを確認してください (ASCII エンコーディングで)。",
    "String.compare|param|that": "ターゲット文字列と比較する文字列",
    "String.concat": "2つ以上の文字列を連結した文字列を返します。",
    "String.concat|param|other": "文字列の末尾に追加する文字列。",
    "String.fromCharCode": "指定された文字コードから、その文字コードに相当する文字1文字だけを含む文字列を作ります。",
    "String.includes": "文字列に指定した文字列の文字が含まれているかどうかを判断します。",
    "String.includes|param|searchValue": "検索するテキスト",
    "String.includes|param|start": "検索の開始インデックス (オプション)",
    "String.indexOf": "文字列内で指定した値が最初に出現する位置を返します。",
    "String.indexOf|param|searchValue": "検索するテキスト",
    "String.indexOf|param|start": "検索の開始インデックス (オプション)",
    "String.isEmpty": "文字列が空かどうかを示す値を返します",
    "String.length": "文字列オブジェクトの長さを返します。",
    "String.replace": "指定された文字列に最初に一致したところを、別の指定された文字列に置き換えたものを返す。",
    "String.replaceAll": "指定された文字列に一致したところすべてを、別の指定された文字列に置き換えたものを返す。",
    "String.replaceAll|param|replacer": "現在の文字列で部分文字列を置き換える先の文字列、または部分文字列を受け取り置き換える先の文字列を返す関数。",
    "String.replaceAll|param|toReplace": "現在の文字列で置き換えられる部分文字列",
    "String.replace|param|replacer": "現在の文字列で部分文字列を置き換える先の文字列、または部分文字列を受け取り置き換える先の文字列を返す関数。",
    "String.replace|param|toReplace": "現在の文字列で置き換えられる部分文字列",
    "String.slice": "現在の文字列の部分文字列を返します。",
    "String.slice|param|end": "最後の文字の一つ前のインデックス",
    "String.slice|param|start": "最初の文字の位置。負の値を指定すると、末尾から数えることができます。たとえば：0",
    "String.split": "区切り文字で文字列を分割する",
    "String.split|param|separator": "@param limit",
    "String.substr": "現在の文字列の部分文字列を返します。",
    "String.substr|param|length": "抽出する文字数",
    "String.substr|param|start": "最初の文字の位置。負の値を指定すると、末尾から数えることができます。たとえば：0",
    "String.toLowerCase": "文字列を小文字に変換する。",
    "String.toUpperCase": "文字列を大文字に変換する。",
    "String.trim": "現在の文字列の両端から空白を削除した部分文字列を返します",
    "String@type": "テキスト文字列の結合、分割、検索を行います。",
    "StringMap": "文字列のキーと文字列の値の辞書",
    "TargetSelector": "ターゲットセレクター",
    "TargetSelector.addRule": "このターゲットセレクターにルールを追加します。",
    "TargetSelector.addRule|param|rule": "追加するルール。たとえば：type",
    "TargetSelector.addRule|param|value": "ルールの値。たとえば：chicken",
    "TargetSelector.atCoordinate": "このターゲットのセレクターの基本座標を設定します。",
    "TargetSelector.atCoordinate|param|p": "このセレクターに設定すべき座標",
    "TargetSelector.outsideRadius": "このセレクターの基本座標からの最小距離を設定します。",
    "TargetSelector.outsideRadius|param|radius": "このターゲットセレクターからの最小距離（ブロック単位）。たとえば：10",
    "TargetSelector.toString": "このターゲットセレクターのゲームの表記を含む文字列を返します。",
    "TargetSelector.withinRadius": "このセレクターの基本座標からの最大距離を設定します。",
    "TargetSelector.withinRadius|param|radius": "このターゲットセレクターからの最大距離（ブロック単位）。たとえば：5",
    "TestForBlocksMask.All": "元の領域と移動先の領域内のすべてのブロックは、正確に一致する必要があります。",
    "TestForBlocksMask.Masked": "元の領域内の空気ブロックは、移動先の領域内の任意のブロックに一致します。",
    "TimeQuery": "時間を取得する際の時間の種類",
    "TimeQuery.RealLife": "Minecraft ゲームのティックで表した一日の実際の時刻",
    "TravelMethod": "プレイヤーやモブの移動方法",
    "TravelMethod.Bounce": "バウンドした",
    "TravelMethod.Climb": "はしごを登る",
    "TravelMethod.Fall": "飛行しない時は宙に浮きます（上か下に転びます）",
    "TravelMethod.Fly": "飛行",
    "TravelMethod.Riding": "乗り物に乗る",
    "TravelMethod.Sneak": "スニーク",
    "TravelMethod.Sprint": "走る",
    "TravelMethod.SwimLava": "溶岩の中で泳ぐ",
    "TravelMethod.SwimWater": "水の中で泳ぐ",
    "TravelMethod.Walk": "普通に歩く（地上での既定値）",
    "_py.range": "指定された値未満までの数値のシーケンスを返す。もし複数の引数が指定された場合、最初の引数はシーケンスの最初の値を示します。",
    "_py.range|param|first": "シーケンスを終える値。この値はシーケンスに含まれない。",
    "_py.range|param|step": "範囲内の各ステップで増減する値。0以外の整数でなければならない。",
    "_py.range|param|stop": "シーケンスを終える値。この値はシーケンスに含まれない。",
    "_py.slice": "pythonの拡張スライス構文に従って、配列の一部を返す。",
    "_py.stringSlice": "pythonの拡張スライス構文に従って、文字列の一部を返す。",
    "agent": "あなたの目標達成を支援する Minecraft のアシスタント。",
    "agent.attack": "エージェントに指定された方向に攻撃を命令するコマンドです。",
    "agent.attack|param|direction": "攻撃する方向。たとえば：SixDirection.Forward",
    "agent.collect": "エージェントに、指定したブロックまたはアイテムを回収させるためのコマンドです。",
    "agent.collectAll": "エージェントに、近くに存在する全てのブロックやアイテムを回収させるためのコマンドです。",
    "agent.collect|param|block": "回収するブロックまたはアイテムの種類",
    "agent.destroy": "エージェントに、指定した方向に存在するブロックを破壊させるためのコマンドです。",
    "agent.destroy|param|direction": "エージェントが壊すブロックの方向。たとえば：SixDirection.Forward",
    "agent.detect": "エージェントが隣接している指定した方向のマスに、ブロックが存在するかどうかを検知する。",
    "agent.detect|param|direction": "検出を実施する方向。たとえば：SixDirection.Forward",
    "agent.detect|param|kind": "エージェントが検出しようとするもの",
    "agent.drop": "持ち物からアイテムを落とします",
    "agent.dropAll": "エージェントが、指定した方向にすべてをドロップするコマンドです。",
    "agent.dropAll|param|direction": "アイテムをドロップする方向。たとえば：SixDirection.Forward",
    "agent.drop|param|direction": "アイテムをドロップする方向。たとえば：SixDirection.Back",
    "agent.drop|param|quantity": "ドロップするアイテムの数量。たとえば：1",
    "agent.drop|param|slot": "アイテムを削除する 1 から 27 のスロット番号を指定します。たとえば：1",
    "agent.getItemCount": "指定したスロットに存在するアイテムの数を取得します。",
    "agent.getItemCount|param|slot": "アイテムの数を数えるスロットの番号 （ 1から27まで ）。たとえば：1",
    "agent.getItemDetail": "エージェントの持ち物にある指定されたスロットのアイテム ID を調べます",
    "agent.getItemDetail|param|slot": "アイテム情報を返すスロットの番号 （ 1から27まで ）。たとえば：1",
    "agent.getItemSpace": "指定したスロットの空き数量を取得します。",
    "agent.getItemSpace|param|slot": "空き数量を数えるスロットの番号 （ 1から27まで ）。たとえば：1",
    "agent.getOrientation": "エージェントの向きを度数で返す。",
    "agent.getPosition": "エージェントの位置をワールド座標で返す。",
    "agent.inspect": "指定した方向に存在するブロックを調査し、ブロックIDやデータを返します。",
    "agent.inspect|param|direction": "調査する方向。たとえば：SixDirection.Forward",
    "agent.inspect|param|kind": "希望する調査結果のタイプ ： ブロックID、または、ブロックデータ",
    "agent.interact": "(右クリックしたように)操作する。",
    "agent.interact|param|direction": "アイテムを置く方向。たとえば：SixDirection.Back",
    "agent.move": "エージェントに、指定した方向に移動するよう命令します。",
    "agent.move|param|blocks": "エージェントを移動させるブロックの数。たとえば：1",
    "agent.move|param|direction": "エージェントの移動方向。たとえば：SixDirection.Forward",
    "agent.place": "エージェントの持ち物内の有効なスロットにあるアイテムやブロックを置きます",
    "agent.place|param|direction": "アイテムを置く方向。たとえば：SixDirection.Back",
    "agent.setAssist": "エージェントの設定を追加します。",
    "agent.setAssist|param|assist": "エージェントの設定の種類",
    "agent.setAssist|param|on": "アシストを有効または無効に設定",
    "agent.setItem": "指定されたブロック・アイテムをエージェントのインベントリに配置する。",
    "agent.setItem|param|blockOrItem": "与えるブロックまたはアイテム",
    "agent.setItem|param|count": "ブロック・アイテムを配置する数量。たとえば：1",
    "agent.setItem|param|slot": "スロットの番号 （ 1から27まで ） 例：1",
    "agent.setSlot": "指定されたエージェントの持ち物のスロットを有効にします。",
    "agent.setSlot|param|slot": "スロットの番号 （ 1から27まで ） 例：1",
    "agent.teleport": "指定した方向、位置にエージェントをテレポートさせる。",
    "agent.teleportToPlayer": "エージェントをプレイヤーの位置にテレポートさせます。",
    "agent.teleport|param|dir": "テレポートさせられたエージェントが向く向きの四方位",
    "agent.teleport|param|pos": "エージェントをテレポートさせる位置",
    "agent.till": "エージェントに、指定した方向の土を耕させるコマンドです。",
    "agent.till|param|direction": "土を耕す方向。たとえば：SixDirection.Forward",
    "agent.transfer": "持ち物にあるアイテムを別のスロットに移します",
    "agent.transfer|param|destinationSlot": "アイテムをドロップするスロットの番号 （ 1から27まで ） 例：2",
    "agent.transfer|param|quantity": "移すアイテムの数量。たとえば：1",
    "agent.transfer|param|sourceSlot": "転送元のスロット番号 （ 1から27まで ） 例：1",
    "agent.turn": "エージェントの向きを、指定した方向に変えます。",
    "agent.turnLeft": "エージェントを90°左に回転させる。",
    "agent.turnRight": "エージェントを90°右に回転させる。",
    "agent.turn|param|direction": "回転方向。たとえば：TurnDirection.Left",
    "blocks": "世界でブロックを追加、調査、変更するためのすべて。",
    "blocks.block": "ゲーム内のブロックです。",
    "blocks.blockById": "ゲーム内のブロックまたはアイテムを ID で表します。",
    "blocks.blockById|param|id": "ゲーム内ブロックまたはアイテムの ID",
    "blocks.blockByName": "ゲーム内のブロックまたはアイテムをコード名で表します。",
    "blocks.blockByName|param|name": "ブロックの名前。たとえば：「stone」",
    "blocks.blockWithData": "ゲーム内のブロックまたはアイテムのデータ値を表します。",
    "blocks.blockWithData|param|b": "ブロックまたはアイテム",
    "blocks.blockWithData|param|data": "ブロックまたはアイテムのデータ値",
    "blocks.block|param|block": "ブロック",
    "blocks.clone": "立方体領域を別の場所に複製します。",
    "blocks.cloneFiltered": "領域内のブロックが特定の種類のブロックと一致する場合にのみ、立方体領域を別の場所に複製します。",
    "blocks.cloneFiltered|param|begin": "立方体領域の最初の角",
    "blocks.cloneFiltered|param|block": "複製時に調べるブロックの種類",
    "blocks.cloneFiltered|param|destination": "移動先領域の最初の角",
    "blocks.cloneFiltered|param|end": "立方体領域の対角線上にある角",
    "blocks.cloneFiltered|param|mode": "複製された領域の処理方法",
    "blocks.clone|param|begin": "立方体領域の最初の角",
    "blocks.clone|param|destination": "移動先領域の最初の角",
    "blocks.clone|param|end": "立方体領域の対角線上にある角",
    "blocks.clone|param|mask": "空気ブロックの処理方法",
    "blocks.clone|param|mode": "複製された領域の処理方法",
    "blocks.color": "ブロックの色の番号を返す。",
    "blocks.colorToBlock": "ゲーム内の色付きのブロックを表す。",
    "blocks.colorToBlock|param|color": "ブロックの色",
    "blocks.colorToBlock|param|type": "羊毛かコンクリートかのブロックの種類",
    "blocks.color|param|color": "色",
    "blocks.comparator": "指定された状態のコンパレーターを作成します。",
    "blocks.comparator|param|direction": "コンパレーターの向き",
    "blocks.comparator|param|mode": "コンパレーターの比較モード",
    "blocks.fill": "2 つの地点の間の空間を埋めます。",
    "blocks.fill|param|block": "空間を埋めるのに使用するブロック",
    "blocks.fill|param|from": "立方体領域の最初の角",
    "blocks.fill|param|operator": "範囲内の既に置かれていたブロックの処理",
    "blocks.fill|param|to": "立方体領域の対角線上にある角",
    "blocks.item": "ゲーム内のアイテムです。",
    "blocks.item|param|item": "アイテム",
    "blocks.kindsOfBlocksInRange": "このAPIは廃止される予定です。",
    "blocks.lever": "指定された状態のレバーを作成します。",
    "blocks.lever|param|position": "レバーの位置状態",
    "blocks.onBlockBroken": "特定の種類のブロックが採掘されるか、破壊されたときにコードを実行します。",
    "blocks.onBlockBroken|param|block": "破壊されたときにこのコードを実行するブロックの種類",
    "blocks.onBlockPlaced": "特定の種類のブロックが配置されたときにコードを実行します。",
    "blocks.onBlockPlaced|param|block": "配置されたときにこのコードを実行するブロックの種類",
    "blocks.place": "世界にブロックを置きます",
    "blocks.place|param|block": "配置するブロック",
    "blocks.place|param|pos": "ブロックを配置する位置",
    "blocks.positionsOfBlocksInRange": "このAPIは廃止される予定です。",
    "blocks.print": "指定ブロックで作られた指定文字を、ゲームの世界の指定位置に表示します。",
    "blocks.print|param|block": "文字を表示するために使用するブロックの種類",
    "blocks.print|param|direction": "文字を表示する方向",
    "blocks.print|param|position": "文字を表示する場所の座標",
    "blocks.print|param|text": "世界に表示する文字。たとえば：「HELLO」",
    "blocks.repeater": "指定された状態のリピーターを作成します。",
    "blocks.repeater|param|delay": "ゲームのティックで表したリピーターの遅延時間",
    "blocks.repeater|param|direction": "リピーターの向き",
    "blocks.replace": "指定された領域内の特定の種類のすべてのブロックを、新しい種類のブロックに入れ替えます。",
    "blocks.replace|param|from": "立方体領域の最初の角",
    "blocks.replace|param|newblock": "既存のブロックと入れ替える新しいブロックの種類",
    "blocks.replace|param|oldblock": "新しいブロックの種類と入れ替えるブロックの種類",
    "blocks.replace|param|to": "立方体領域の対角線上にある角",
    "blocks.testForBlock": "指定した座標のブロックが特定の種類のブロックかどうかを調査します。",
    "blocks.testForBlocks": "2 つの領域内のブロックが一致するかどうかを調査します。",
    "blocks.testForBlock|param|block": "調査するブロックの種類",
    "blocks.testForBlock|param|pos": "ブロックが存在すべき座標",
    "console.inspect": "指定されたオブジェクトや値を文字列で表現する。",
    "console.inspect|param|maxElements": "[省略可能]文字列で表現するオブジェクトの最大数値",
    "console.inspect|param|obj": "文字列で表現する値",
    "gameplay": "ゲームのモード、天気、時間を制御し、ルールを変更するためのコマンド。",
    "gameplay.dismissChat": "チャット画面が開いている場合は閉じる (Minecraft Educationのみ)",
    "gameplay.immutableWorld": "ワールドか編集可能かどうかを変更する。",
    "gameplay.immutableWorld|param|enabled": "ワールドの編集が許可されている場合はtrue、許可されない場合はfalse",
    "gameplay.isDaylightTime": "現在の時刻を、ゲームのティック数で取得します。",
    "gameplay.isDaylightTime|param|query": "取得する時刻の種類",
    "gameplay.setDifficulty": "ゲームの難易度を変更します。",
    "gameplay.setDifficulty|param|difficulty": "新しい難易度",
    "gameplay.setGameMode": "選択したプレイヤーのゲームモードを変更します。",
    "gameplay.setGameMode|param|mode": "目的のゲームモード。たとえば：GameMode.Survival",
    "gameplay.setGameMode|param|player": "ゲームモードを変更するプレイヤーを決定するセレクター",
    "gameplay.setGameRule": "ゲームのルールを有効または無効にします。",
    "gameplay.setGameRule|param|enabled": "指定されたルールを有効にするかどうか",
    "gameplay.setGameRule|param|rule": "変更するゲームのルール。たとえば：GameRule.PvP",
    "gameplay.setWeather": "現在の天気を変更します。",
    "gameplay.setWeather|param|weather": "目的の天気。たとえば：Weather.Clear",
    "gameplay.time": "既定の時刻を表します。",
    "gameplay.timeAdd": "現在の時刻にティック（このゲームでの時間の単位）を追加します。",
    "gameplay.timeAdd|param|amount": "現在の時刻に追加するティックの数。たとえば：100",
    "gameplay.timeQuery": "現在の時刻を、ゲームのティック数で取得します。",
    "gameplay.timeQuery|param|query": "取得する時刻の種類",
    "gameplay.timeSet": "現在の時刻を、ゲームのティック数を指定して既定の時刻か指定の時刻に設定します。",
    "gameplay.timeSet|param|time": "目的の時刻。たとえば：DayTime.Day",
    "gameplay.time|param|time": "既定の時刻。たとえば：DateTime.Day",
    "gameplay.title": "選択したターゲットのタイトルとサブタイトルを表示します",
    "gameplay.title|param|subTitle": "表示するサブタイトル",
    "gameplay.title|param|target": "選択するプレイヤーとエンティティ",
    "gameplay.title|param|title": "表示する大きなタイトル",
    "gameplay.toggleDownfall": "雨が降っていなかったら雨を降らし、雨が降っていたら雨を止めます。",
    "gameplay.xp": "選択したプレイヤーに経験値を追加します。",
    "gameplay.xp|param|amount": "追加する経験値のポイント。たとえば：10",
    "gameplay.xp|param|target": "経験値を追加するプレイヤーを決定するためのセレクター",
    "loops.forever": "コードを、ずっとバックグラウンドでくり返します。くり返しの1回ごとに、ほかのコードを実行する時間を与えます。",
    "loops.forever|param|body": "ずっとくり返すコード",
    "loops.pause": "ミリ秒で指定された時間、一時停止します。",
    "loops.pause|param|ms": "ひと休みする時間の長さ（ミリ秒）。たとえば：100、200、500、1000、2000",
    "loops.runInBackground": "現在のコードと並行してこのコードを実行します。",
    "mobs": "Minecraft の世界に住んでいる生き物。",
    "mobs._queryTargetCore": "指定されたターゲットセレクターの情報を取得する。",
    "mobs._queryTargetCore|param|target": "情報を取得するエンティティを決定するターゲットセレクター",
    "mobs.animal": "ゲーム内の動物です。",
    "mobs.animal|param|name": "動物の種類",
    "mobs.applyEffect": "指定された対象に特殊効果を適用します",
    "mobs.applyEffect|param|amplifier": "特殊効果の強さ",
    "mobs.applyEffect|param|duration": "エフェクトの長さ",
    "mobs.applyEffect|param|effect": "適用する特殊効果",
    "mobs.applyEffect|param|target": "どのエンティティが手に持っているアイテムにエンチャントを付与されるかを決定するターゲットセレクター",
    "mobs.clearEffect": "指定された対象からすべてのステータス効果を解除する。",
    "mobs.clearEffect|param|target": "どのエンティティがステータス効果を解除されるかを決定するターゲットセレクター",
    "mobs.effect": "指定された対象に特殊効果を適用します",
    "mobs.effect|param|amplifier": "特殊効果の強さ",
    "mobs.effect|param|duration": "特殊効果の長さ",
    "mobs.effect|param|effect": "適用する特殊効果",
    "mobs.effect|param|target": "どのエンティティが手に持っているアイテムにエンチャントを付与されるかを決定するターゲットセレクター",
    "mobs.enchant": "指定されたターゲットに特定のエンチャントを適用します。",
    "mobs.enchant|param|level": "エンチャントの強さ。たとえば：1",
    "mobs.enchant|param|spell": "エンチャントのコードネーム。たとえば：「infinity」",
    "mobs.enchant|param|target": "どのプレイヤーがエンチャントを得るかを決定するターゲットセレクター",
    "mobs.entitiesByType": "特定の種類のモブ（動物やモンスター）をすべて選択します。",
    "mobs.entitiesByType|param|type": "選択するモブの種類",
    "mobs.execute": "他のターゲットとしてコマンドを実行します。",
    "mobs.executeDetect": "特定の種類のブロックが指定された位置で検出されたときにコマンドを実行します。",
    "mobs.executeDetect|param|command": "指定されたブロックが正常に検出された場合に選択したターゲットが実行する完全なコマンド。たとえば：「say Hi!」",
    "mobs.executeDetect|param|detectBlock": "調査するブロックの種類",
    "mobs.executeDetect|param|detectPosition": "ブロックを検出する位置",
    "mobs.execute|param|command": "選択したターゲットが実行する完全なコマンド。たとえば：「say Hi!」",
    "mobs.execute|param|position": "コマンドを実行する位置の座標",
    "mobs.execute|param|target": "どのエンティティがコマンドを実行するのかを決定するターゲットセレクター",
    "mobs.give": "ゲームからブロックやアイテムを指定されたプレイヤーに渡します。",
    "mobs.give|param|amount": "与える数量。たとえば：1",
    "mobs.give|param|block": "与えるブロックまたはアイテム",
    "mobs.give|param|target": "どのプレイヤーがブロックやアイテムを得るかを決定するターゲットセレクター",
    "mobs.kill": "選択されたエンティティを行動不能にする",
    "mobs.kill|param|target": "どのエンティティが行動不能になるのかを決定するターゲットセレクター",
    "mobs.monster": "ゲーム内のモンスターです。",
    "mobs.monster|param|name": "モンスターの種類",
    "mobs.near": "指定した位置近くのターゲットを選択します",
    "mobs.near|param|pos": "ターゲットを選択する場所付近の位置",
    "mobs.near|param|radius": "指定されたターゲット選択位置からの距離（ブロック単位）。たとえば：5",
    "mobs.near|param|target": "選択されるエンティティの種類",
    "mobs.onMobKilled": "特定の種類の生き物が行動不能になったときに、コードを実行します。",
    "mobs.onMobKilled|param|mob": "生き物の種類",
    "mobs.parseSelector": "指定の文字列を TargetSelector オブジェクトに解析します。この関数は正しい型の引数が与えられたかどうかや、引数の名前が有効であるかどうかを確認するためのチェックは行いません。\n\n@returns 解析された TargetSelector オブジェクトまたは null（文字列が無効だった場合）",
    "mobs.parseSelector|param|str": "文字列を解析するターゲットセレクター",
    "mobs.playerByName": "指定された名前を持つプレイヤーを選択します。",
    "mobs.playerByName|param|name": "選択するプレイヤーの名前。たとえば：名前",
    "mobs.playersInGameMode": "指定されたゲームモードのプレイヤーをすべて選択します。",
    "mobs.playersInGameMode|param|mode": "すべてのプレイヤーを選択するゲームモード",
    "mobs.projectile": "ゲーム内の飛び道具です。",
    "mobs.projectile|param|name": "飛び道具の種類",
    "mobs.queryTarget": "指定されたターゲットセレクターの情報を取得する。",
    "mobs.queryTarget|param|target": "情報を取得するエンティティを決定するターゲットセレクター",
    "mobs.spawn": "指定した場所に生き物を召喚します。",
    "mobs.spawnParticle": "指定された位置にパーティクルを表示させる。",
    "mobs.spawnParticle|param|position": "パーティクルを表示させる位置",
    "mobs.spawn|param|destination": "生き物を召喚する位置の座標",
    "mobs.spawn|param|mob": "召喚する生き物の種類",
    "mobs.target": "プレイヤーまたはモブのセットを選択します。",
    "mobs.target|param|kind": "選択されるエンティティの種類",
    "mobs.teleportToPlayer": "エンティティをプレイヤーにテレポートします。",
    "mobs.teleportToPlayer|param|destination": "どのプレイヤーにエンティティをテレポートするのかを決定するターゲットセレクター",
    "mobs.teleportToPlayer|param|target": "どのエンティティがテレポートされるのかを決定するターゲットセレクター",
    "mobs.teleportToPosition": "エンティティをほかの場所にテレポートします。",
    "mobs.teleportToPosition|param|destination": "選択したエンティティのテレポート先の座標",
    "mobs.teleportToPosition|param|target": "どのエンティティがテレポートされるのかを決定するターゲットセレクター",
    "parseFloat": "文字列を数値に変換します。",
    "parseInt": "文字列を整数に変換します。",
    "parseInt|param|radix": "テキスト内の数値の基数を指定する 2 ~ 36 の範囲の値です。",
    "parseInt|param|text": "整数に変換する文字列。例: \"123\"",
    "player": "コマンドの実行、情報交換、ゲーム内で発生するイベントへの応答を行います。",
    "player.chatCommandSyntaxError": "ゲーム内チャットでチャットコマンドのヘルプメッセージを表示します。\n* @param helpStr 書式付きのコマンド構文",
    "player.errorMessage": "ゲーム内チャットでエラーメッセージを表示します。\n* @param msg ゲーム内チャットに表示するエラーメッセージ",
    "player.execute": "現在のプレイヤーとしてゲームのコマンドを実行します。",
    "player.execute|param|command": "実行するスラッシュコマンド（先頭に``/``を入れる必要はありません）。たとえば：「say Hi!」",
    "player.getChatArg": "最後のプレイヤーのチャットメッセージから指定された引数を取得します。",
    "player.getChatArgs": "指定したコマンドの引数を取得します。\n\n* 注意：これは RefCollection を返しますが、シミュレータの設定により RefCollection を return 型として宣言することができません。代わりにシグネチャでは string[] を使用しますが、実際には RefCollection を <any> としてキャストして返します。",
    "player.getChatArgs|param|command": "引数を取得するチャットコマンド",
    "player.getOrientation": "プレイヤーの向きを度数で返す。",
    "player.message": "最後のメッセージがある場合は取得します。",
    "player.name": "現在のプレイヤー（あなた）の名前を返します。",
    "player.onArrowShot": "現在のプレーヤーが矢を打った時に、コードを実行します。",
    "player.onBounced": "現在のプレーヤーがスライムブロックの上でバウンドした時に、コードを実行します。",
    "player.onCameraUsed": "カメラで写真を撮影した時に、コードを実行します。",
    "player.onChat": "設定されたキーワードをゲーム内チャットで入力すると、ハンドラー内のコードを実行します。",
    "player.onChatCommand": "設定されたキーワードをゲーム内チャットで入力すると、ハンドラー内のコードを実行します。",
    "player.onChatCommandCore": "キーワードをチャットで入力すると、コードを実行します。",
    "player.onChatCommandCore|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
    "player.onChatCommand|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
    "player.onChat|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
    "player.onDied": "現在のプレイヤーが死んだとき、コードを実行します。",
    "player.onItemInteracted": "アイテムが使用された時にプログラムを実行する",
    "player.onTeleported": "現在のプレーヤーがテレポートをするときにコードを実行します。",
    "player.onTellCommand": "ほかのプレーヤーがあなたに特定のメッセージをささやいたときにコードを実行します。",
    "player.onTellCommand|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
    "player.onTravelled": "現在のプレーヤーが指定された方法で移動した時にコードを実行します。",
    "player.onTravelled|param|method": "移動方法",
    "player.position": "現在のプレイヤーの世界での位置を返します。",
    "player.runChatCommand": "コード内でチャットコマンドを実行します。",
    "player.runChatCommandWithArguments": "コード内でチャットコマンドを引数付きで実行します。",
    "player.runChatCommandWithArguments|param|arg": "チャット コマンドで利用したいすべての引数を含む文字列",
    "player.runChatCommandWithArguments|param|command": "実行するチャットコマンド。たとえば：「jump」",
    "player.runChatCommand|param|command": "実行するチャットコマンド。たとえば：「jump」",
    "player.say": "ゲーム内チャットにメッセージを送信します。",
    "player.say|param|message": "チャットに表示するメッセージ。たとえば：「Hi!」",
    "player.teleport": "現在のプレーヤーを別の位置にテレポートさせます。",
    "player.teleport|param|to": "目的の位置",
    "player.tell": "ターゲットにメッセージをささやきます。",
    "player.tell|param|message": "ささやく文字列。たとえば：「Hi!」",
    "player.tell|param|target": "エンティティのセレクター",
    "player.warningMessage": "チャットで(橙色の文字で)警告を表示する。",
    "pos": "新しく相対的な位置を作成します（東西、上下、南北）。",
    "posCamera": "新しくカメラ座標を作成する。右、上、前",
    "posCamera|param|x": "左（-x）または右（+x）方向の座標（ブロック単位）",
    "posCamera|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "posCamera|param|z": "後ろ（-z）または前（-z）方向の座標（ブロック単位）",
    "posLocal": "新しくローカル座標を作成する。左、上、前",
    "posLocal|param|x": "左（+x）または右（-x）方向の座標（ブロック単位）",
    "posLocal|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "posLocal|param|z": "前（+z）または後ろ（-z）方向の座標（ブロック単位）",
    "positions": "世界での位置と相対的な位置を表します。",
    "positions.add": "2 つの指定位置を追加して新しい位置を作成します。",
    "positions.add|param|p1": "追加する最初の位置",
    "positions.add|param|p2": "追加する二番目の位置",
    "positions.create": "新しく相対的な位置を作成します（東西、上下、南北）。",
    "positions.createCamera": "新しくカメラ座標を作成する。右、上、前",
    "positions.createCamera|param|x": "左（+x）または右（-x）方向の座標（ブロック単位）",
    "positions.createCamera|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "positions.createCamera|param|z": "前（+z）または後ろ（-z）方向の座標（ブロック単位）",
    "positions.createHybrid": "相対座標と絶対座標を混在させた新しい位置を作成します。",
    "positions.createLocal": "新しくローカル座標を作成する。左、上、前",
    "positions.createLocal|param|x": "左（+x）または右（-x）方向の座標（ブロック単位）",
    "positions.createLocal|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "positions.createLocal|param|z": "前（+z）または後ろ（-z）方向の座標（ブロック単位）",
    "positions.createWorld": "新しい世界での位置を作成します（東西、上下、南北）。",
    "positions.createWorld|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
    "positions.createWorld|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "positions.createWorld|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
    "positions.create|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
    "positions.create|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "positions.create|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
    "positions.equals": "2つの位置が同等かどうかを比較します。",
    "positions.equals|param|p1": "比較する最初の位置",
    "positions.equals|param|p2": "比較する 2 番目の位置",
    "positions.groundPosition": "指定された位置の下の地面を探し、そのすぐ上にある空気ブロックの座標を返す。もし指定された位置のブロックが固体ブロックの場合、その下を探していき見つかった空気ブロックから地面を探す。液体は固体とみなされる。",
    "positions.groundPosition|param|pos": "地面を探し始める位置",
    "positions.random": "指定された立方体領域内でランダムに位置を選択します。",
    "positions.random|param|p1": "立方体領域の最初の角の位置",
    "positions.random|param|p2": "立方体領域の対角線上にある角の位置",
    "positions.toCompassDirection": "方位の度数を最も近い四方位に変換する。",
    "positions.toCompassDirection|param|deg": "四方位に変換される方位の度数",
    "pos|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
    "pos|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "pos|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
    "randint": "min と max の間に含まれる疑似乱数を返します。両方の数値が整数値の場合は、結果も整数値となります。",
    "randint|param|max": "境界を含めた上限。たとえば：10",
    "randint|param|min": "境界を含めた下限。たとえば：0",
    "randpos": "指定された立方体領域内でランダムに位置を選択します。",
    "randpos|param|p1": "立方体領域の最初の角の位置",
    "randpos|param|p2": "立方体領域の対角線上にある角の位置",
    "world": "新しい世界での位置を作成します（東西、上下、南北）。",
    "world|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
    "world|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
    "world|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）"
}